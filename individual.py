from simpleError import DatasetError
import random
import math
from bits import fourbit

class Individual():
    def __init__(self, geneSize):
        # geneSize: length of chromosome. In this problem, gene size is 500.
        # gene: List of locus. allele of locus is 1 or 0.
        # totalWeight: Sum of item weight. It can't jump over capacity of Knapsack.
        # totalProfit: Sum of item profit. It is fitness value of individual.
        # If totalWeight > capacity, totalProfit = 0.
        self.geneSize = geneSize
        self.gene = []
        self.fitness = 0

    def initialization(self, gene=[]):
        # If input gene is not exist, gene is randomly generated by bit 0, 1
        if not gene:
            for i in range(self.geneSize):
                self.gene.append(random.randint(0, 1))
        else:
            self.gene = gene

    def evaluation(self):
        # Evaluate individual.
        # Sum all weight and profit of items individual have.
        # If totalWeight is bigger than capacity, totalProfit is 0.
        self.fitness = fourbit(self.gene)